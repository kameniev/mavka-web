{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\mavka-web\\\\src\\\\UI\\\\QuestionNavPanel\\\\QuestionNavPanel.js\";\nimport React, { Component } from \"react\";\nimport ButtonQNav from \"../ButtonQNav\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport styled from \"styled-components\";\nimport ABCDE from \"../../screens/Templates/ABCDE/ABCDE\";\n\nclass QuestionNavPanel extends Component {\n  update(newCurrent) {\n    let buttons = [...this.state.buttons];\n    buttons[this.state.current - 1].active = false;\n    buttons[newCurrent - 1].active = true;\n    this.setState({\n      buttons: buttons,\n      current: newCurrent\n    });\n  }\n\n  updateWindowDimensions() {\n    this.setState({\n      windowHeight: window.innerHeight,\n      windowWidth: window.innerWidth\n    });\n  }\n\n  constructor(props) {\n    // сейчас это просто количество вопросов в тесте. Когда функции будут готовы все пропишу\n    super(props);\n\n    this.random = () => Math.random() > 0.5;\n\n    this.getWidth = width => this.state.windowWidth * width / 100.0;\n\n    this.getHeight = height => this.state.windowHeight * height / 100.0;\n\n    this.htmlButton = (button, index) => /*#__PURE__*/React.createElement(ButtonQNav, {\n      pushed: button.pushed,\n      number: index + 1,\n      backColor: this.backColor(button),\n      color: this.colorText(button),\n      height: this.getHeight(button.active ? 4.5 : 3),\n      width: this.getWidth(2.2),\n      marginLeft: this.getWidth(0.22),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    });\n\n    this.backColor = status => status.active ? \"#FFBE0B\" : status.status ? \"#000000\" : \"#FFFFFF\";\n\n    this.colorText = status => status.active ? \"#000000\" : status.status ? \"#FFFFFF\" : \"#000000\";\n\n    let list = props.list;\n\n    let getStatus = () => this.random();\n\n    let buttons = [];\n\n    for (let i = 0; i < list; i++) {\n      buttons.push({\n        pushed: () => {\n          document.getElementById(\"fakeButton\").click(); // это надо, чтобы dropdown пропадал по клику\n\n          this.update(i + 1);\n          this.props.callback(i + 1);\n        },\n        status: getStatus(),\n        active: i == this.props.active - 1\n      });\n    }\n\n    this.state = {\n      current: 1,\n      n: list,\n      buttons: buttons,\n      windowHeight: window.innerHeight,\n      windowWidth: window.innerWidth,\n      callback: props.callback\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  render() {\n    const delta = 6;\n    let current = this.state.current;\n    let allButtons = this.state.buttons;\n    const styles = {\n      border: \"1px solid black\",\n      borderRadius: \"5px\",\n      width: this.getWidth(7.4),\n      marginLeft: this.getWidth(0.22)\n    };\n    let middle = allButtons.map((button, index) => {\n      if (Math.abs(index - current + 1) > delta) return null;\n      return this.htmlButton(button, index);\n    });\n    let left = allButtons.map((button, index) => {\n      if (Math.abs(index - current + 1) <= delta || index >= current - 1) return null;\n      return this.htmlButton(button, index);\n    });\n    let right = allButtons.map((button, index) => {\n      if (Math.abs(index - current + 1) <= delta || index <= current - 1) return null;\n      return this.htmlButton(button, index);\n    });\n\n    let check = elem => elem != null;\n\n    left = left.filter(check);\n    middle = middle.filter(check);\n    right = right.filter(check);\n    /*const dr = () => (\r\n    );\r\n    const styledDr = styled(dr)`\r\n        color: red;\r\n    `;*/\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        width: \"100%\",\n        height: \"100%\",\n        justifyContent: \"center\",\n        alignItems: \"flex-end\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"style\", {\n      type: \"text/css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, `\n                     #my-dropdown {\n                        border-radius: 5px;\n                        font-size: 14px;\n                        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.08);\n                        border-width: 1px;\n                        background-color: white;\n                        width:` + this.getWidth(2.2) + `px;\n                        height:` + this.getHeight(3) + `px;\n                    }   \n                    `), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"fakeButton\",\n      style: {\n        visibility: \"hidden\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    }), left.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(DropdownButton, {\n      key: 'left',\n      drop: 'left',\n      title: '⯇',\n      id: \"my-dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: styles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 33\n      }\n    }, left)))) : null, middle, right.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginLeft: this.getWidth(0.22)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(DropdownButton, {\n      key: 'right',\n      drop: 'right',\n      title: '⯈',\n      id: \"my-dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: styles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 33\n      }\n    }, right)))) : null);\n  }\n\n}\n\nexport default QuestionNavPanel;","map":{"version":3,"sources":["C:/Users/Acer/Desktop/mavka-web/src/UI/QuestionNavPanel/QuestionNavPanel.js"],"names":["React","Component","ButtonQNav","DropdownButton","styled","ABCDE","QuestionNavPanel","update","newCurrent","buttons","state","current","active","setState","updateWindowDimensions","windowHeight","window","innerHeight","windowWidth","innerWidth","constructor","props","random","Math","getWidth","width","getHeight","height","htmlButton","button","index","pushed","backColor","colorText","status","list","getStatus","i","push","document","getElementById","click","callback","n","bind","addEventListener","render","delta","allButtons","styles","border","borderRadius","marginLeft","middle","map","abs","left","right","check","elem","filter","display","justifyContent","alignItems","visibility","length"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport ButtonQNav from \"../ButtonQNav\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport styled from \"styled-components\";\r\nimport ABCDE from \"../../screens/Templates/ABCDE/ABCDE\";\r\n\r\nclass QuestionNavPanel extends Component {\r\n\r\n    update(newCurrent) {\r\n        let buttons = [...this.state.buttons];\r\n        buttons[this.state.current - 1].active = false;\r\n        buttons[newCurrent - 1].active = true;\r\n        this.setState({\r\n            buttons: buttons,\r\n            current: newCurrent\r\n        });\r\n    };\r\n\r\n\r\n    updateWindowDimensions() {\r\n        this.setState({\r\n            windowHeight: window.innerHeight,\r\n            windowWidth: window.innerWidth\r\n        });\r\n    }\r\n\r\n    random = () => Math.random() > 0.5;\r\n\r\n    constructor (props) { // сейчас это просто количество вопросов в тесте. Когда функции будут готовы все пропишу\r\n        super(props);\r\n        let list = props.list;\r\n\r\n        let getStatus = () => this.random();\r\n\r\n        let buttons = [];\r\n        for (let i = 0; i < list; i++) {\r\n            buttons.push({\r\n                pushed: () => {\r\n                    document.getElementById(\"fakeButton\").click(); // это надо, чтобы dropdown пропадал по клику\r\n                    this.update(i + 1);\r\n                    this.props.callback(i + 1);\r\n                },\r\n                status: getStatus(),\r\n                active: i == this.props.active - 1\r\n            });\r\n        }\r\n\r\n\r\n        this.state = {\r\n            current: 1,\r\n            n: list,\r\n            buttons: buttons,\r\n            windowHeight: window.innerHeight,\r\n            windowWidth: window.innerWidth,\r\n            callback: props.callback\r\n        };\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    getWidth = width => this.state.windowWidth * width / 100.0;\r\n    getHeight = height => this.state.windowHeight * height / 100.0;\r\n\r\n\r\n\r\n    htmlButton = (button, index) => (\r\n        <ButtonQNav\r\n            pushed={button.pushed}\r\n            number={index + 1}\r\n            backColor={this.backColor(button)}\r\n            color={this.colorText(button)}\r\n            height={this.getHeight(button.active ? 4.5 : 3)}\r\n            width={this.getWidth(2.2)}\r\n            marginLeft={this.getWidth(0.22)}\r\n        />\r\n    );\r\n\r\n    backColor = status => status.active ? \"#FFBE0B\" : status.status ? \"#000000\" : \"#FFFFFF\";\r\n    colorText = status => status.active ? \"#000000\" : status.status ? \"#FFFFFF\" : \"#000000\";\r\n\r\n    render() {\r\n        const delta = 6;\r\n        let current = this.state.current;\r\n        let allButtons = this.state.buttons;\r\n\r\n        const styles = {\r\n            border: \"1px solid black\",\r\n            borderRadius: \"5px\",\r\n            width: this.getWidth(7.4),\r\n            marginLeft: this.getWidth(0.22)\r\n        };\r\n\r\n\r\n        let middle = allButtons.map((button, index) => {\r\n            if (Math.abs(index - current + 1) > delta) return null;\r\n            return this.htmlButton(button, index);\r\n        });\r\n\r\n        let left = allButtons.map((button, index) => {\r\n            if (Math.abs(index - current + 1) <= delta || index >= current - 1) return null;\r\n            return this.htmlButton(button, index);\r\n        });\r\n\r\n        let right = allButtons.map((button, index) => {\r\n            if (Math.abs(index - current + 1) <= delta || index <= current - 1) return null;\r\n            return this.htmlButton(button, index);\r\n        });\r\n\r\n        let check = elem => elem != null;\r\n\r\n        left = left.filter(check);\r\n        middle = middle.filter(check);\r\n        right = right.filter(check);\r\n\r\n        /*const dr = () => (\r\n        );\r\n        const styledDr = styled(dr)`\r\n            color: red;\r\n        `;*/\r\n\r\n        return (\r\n            <div style={{\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"flex-end\"\r\n            }}>\r\n                <style type=\"text/css\">\r\n                    {`\r\n                     #my-dropdown {\r\n                        border-radius: 5px;\r\n                        font-size: 14px;\r\n                        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.08);\r\n                        border-width: 1px;\r\n                        background-color: white;\r\n                        width:` + this.getWidth(2.2) + `px;\r\n                        height:` + this.getHeight(3) + `px;\r\n                    }   \r\n                    `}\r\n                </style>\r\n                <button\r\n                    id={\"fakeButton\"}\r\n                    style={{\r\n                        visibility: \"hidden\"\r\n                    }}\r\n                />\r\n                {left.length > 0 ? (\r\n                    <div>\r\n                        <div>\r\n\r\n                            <DropdownButton\r\n                                key={'left'}\r\n                                drop={'left'}\r\n                                title={'⯇'}\r\n                                id={\"my-dropdown\"}\r\n                            >\r\n                                <div style={styles}>\r\n                                    {left}\r\n                                </div>\r\n                            </DropdownButton>\r\n                        </div>\r\n                    </div>\r\n                ) : null}\r\n                {middle}\r\n                {right.length > 0 ? (\r\n                    <div  style={{\r\n                        marginLeft: this.getWidth(0.22)\r\n                    }}>\r\n                        <div>\r\n                            <DropdownButton\r\n                                key={'right'}\r\n                                drop={'right'}\r\n                                title={'⯈'}\r\n                                id={\"my-dropdown\"}\r\n                            >\r\n                                <div style={styles}>\r\n                                    {right}\r\n                                </div>\r\n                            </DropdownButton>\r\n                        </div>\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default QuestionNavPanel;"]},"metadata":{},"sourceType":"module"}